<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>二维码生成与预览</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 0;
        }
        .container {
            text-align: center;
            width: 80%;
            max-width: 600px;
        }
        .input-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            margin: 15px 0;
        }
        .input-group label {
            width: 100%;
            text-align: left;
            margin-bottom: 5px;
            font-size: 18px;
        }
        .input-group input[type="text"],.input-group textarea, .input-group select {
            width: 100%;
            padding: 12px;
            font-size: 16px;
            box-sizing: border-box;
        }
        .input-group select option {
            line-height: 34px;
            padding: 10px;
            font-size: 18px;
        }
        .input-group div {
            flex: 1;
        }
        .input-group div img {
            height: 120px;
            width: 80px;
            float: left;
            margin-right: 10px; 
            margin-bottom: 10px; 
        }
        button {
            width: 100%;
            margin: 15px 0;
            padding: 12px;
            font-size: 18px;
            box-sizing: border-box;
        }
        #qrCode img {
            margin-top: 20px;
            max-width: 100%;
        }
        @media (min-width: 600px) {
            .input-group {
                flex-direction: row;
            }
            .input-group label {
                width: 30%;
                text-align: right;
                margin-right: 10px;
                margin-bottom: 0;
            }
            .input-group input[type="text"],.input-group input[type="color"],.input-group textarea, .input-group select {
                flex: 1;
            }
            .input-group #images {
                flex: 1;
            }
            .input-group #images img {
                height: 120px;
                width: 80px;
                float: left;
                margin-right: 10px; 
            }
            .input-group #images iframe {
                height: 120px;
                width: 80px;
                float: left;
                margin-right: 10px; 
            }
            button {
                width: auto;
            }
        }
    </style>  
</head>
<body>
    <div class="container">
        <h1>二维码生成与预览</h1>
        <div class="input-group">
            <label for="text1">电池编号（可填多个）:</label>
            <textarea id="battery_num" rows="3" placeholder="电池编号">MA53HLYM5191100014560B41011896</textarea>
        </div>
        <div class="input-group">
            <label for="text1">蓄电池类型:</label>
            <input type="text" id="battery_type" placeholder="蓄电池类型" value="锂电">
        </div>
        <div class="input-group">
            <label for="text2">蓄电池生产企业:</label>
            <select id="battery_company" name="battery_company">
                <option value="东莞新能安科技有限公司" selected>东莞新能安科技有限公司</option>
                <option value="星恒电源(滁州)有限公司-24V">星恒电源(滁州)有限公司-48V 24A</option>
                <option value="星恒电源(滁州)有限公司-48V">星恒电源(滁州)有限公司-48V 12A</option>
                <option value="山东爱德邦智能科技有限公司">山东爱德邦智能科技有限公司</option>
                <option value="厦门新能安科技有限公司" >厦门新能安科技有限公司</option>
                <option value="台州爱德邦智能科技有限公司">台州爱德邦智能科技有限公司</option>
                <option value="浙江超威创元实业有限公司-24V">浙江超威创元实业有限公司-DZ48NZ-24EM</option>
                <option value="浙江超恒动力科技有限公司">浙江超恒动力科技有限公司</option>
                <option value="湖州天丰电源有限公司">湖州天丰电源有限公司</option>
                <option value="浙江超威创元实业有限公司-48V">浙江超威创元实业有限公司-48V 16A</option>
                <option value="山东爱德邦智能科技有限公司-48V">山东爱德邦智能科技有限公司-DZ48NZ-24AM</option>
            </select>
        </div>
        <div class="input-group">
            <label for="text3">蓄电池容量（Ah）:</label>
            <input type="text" id="battery_size" placeholder="蓄电池容量（Ah）" value="24">
        </div>
        <div class="input-group">
            <label for="text3">蓄电池型号:</label>
            <input type="text" id="battery_model" placeholder="蓄电池型号" value="DZ48N-24EM">
        </div>
        <div class="input-group">
            <label for="text3">蓄电池重量:</label>
            <input type="text" id="battery_kg" placeholder="蓄电池重量" value="8.5±0.5(kg)">
        </div>
        <div class="input-group">
            <label for="text3">生产日期:</label>
            <input type="text" id="battery_date" placeholder="生产日期" value="2023-06-01">
        </div>
        <div class="input-group">
            <label for="imageUpload">报告文件:</label>
            <div id="images" class="images" >
                <!-- <img src="./report/东莞新能安科技有限公司/产品认证证书.jpg" width="80" height="120" style="float: left;"/> -->
            </div>
        </div>
        <div class="input-group">
            <label for="text3">二维码文字颜色:</label>
            <input type="color" id="dark_color" value="#000000">
        </div>
        <div class="input-group">
            <label for="text3">二维码背景颜色:</label>
            <input type="color" id="light_color" enableAlpha value="#ffffff">
        </div>
        <button id="preview">预览</button>
        <button id="generateQR">生成二维码</button>
        <button id="downloadPng">png打包下载</button>
        <button id="downloadSvg">svg打包下载</button>
        <div id="result"></div>
    </div>

    <script src="./static/qrcode.min.js"></script>
    <script src="./static/jszip.min.js"></script>
    <script>
        function loadReportPath(battery_company){
            var fileName = "./report/" + battery_company + ".jpg"
            return fileName
        }
        function loadImgs() {
            var reportPath = loadReportPath(document.getElementById('battery_company').value.trim()); 
            var fileContainer = document.getElementById('images');
            fileContainer.innerHTML = ''; 
            var a = document.createElement('a');
            a.href = reportPath;
            a.innerHTML = reportPath
            a.target="_blank"
            fileContainer.appendChild(a);
        }
        loadImgs()
        document.getElementById('battery_company').addEventListener('change', loadImgs);

        function getUrl(battery_num){
            const battery_type = document.getElementById('battery_type').value;
            const battery_company = document.getElementById('battery_company').value;
            const battery_size = document.getElementById('battery_size').value;
            const battery_model = document.getElementById('battery_model').value;
            const battery_kg = document.getElementById('battery_kg').value;
            const battery_date = document.getElementById('battery_date').value;
            const reportPath = loadReportPath(battery_company)
            var real_battery_company = battery_company;
            if(battery_company.indexOf("-") > 0){
                real_battery_company = battery_company.substring(0, battery_company.indexOf("-"))
            }
            const url = `index.htm?battery_num=${encodeURIComponent(battery_num)}`
            +`&battery_type=${encodeURIComponent(battery_type)}`
            +`&battery_company=${encodeURIComponent(real_battery_company)}`
            +`&battery_size=${encodeURIComponent(battery_size)}`
            +`&battery_model=${encodeURIComponent(battery_model)}`
            +`&battery_kg=${encodeURIComponent(battery_kg)}`
            +`&battery_date=${encodeURIComponent(battery_date)}`
            +`&file_path=${reportPath}`;
            return window.location.href.substring(0, window.location.href.lastIndexOf("/") + 1) + url;
        }
        
        document.getElementById('preview').addEventListener('click', function() {
            const battery_nums = document.getElementById('battery_num').value;
            const url = getUrl(battery_nums.split("\n")[0]);
            window.open(url, '_blank');
        });
        document.getElementById('generateQR').addEventListener('click', function() {
            const battery_nums = document.getElementById('battery_num').value;
            const dark_color = document.getElementById('dark_color').value;
            const light_color = document.getElementById('light_color').value;
            document.getElementById('result').innerHTML = '';
            const disArray = Array.from(new Set(battery_nums.split("\n")))
            disArray.forEach(battery_num => {
                const urlText = getUrl(battery_num);
                genQrCode(urlText, battery_num, light_color, dark_color)
            })
        });
        document.getElementById('downloadPng').addEventListener('click', function () {
            const svgDivs = document.querySelectorAll('.svg-code');
            var zip = new JSZip();
            svgDivs.forEach((svgDiv,index) => {
                const imgName = svgDiv.name + ".png";
                svg2Png(svgDiv.innerHTML, function(base64) {
                    zip.file(imgName, base64)
                    if(index === svgDivs.length - 1){
                        downloadZip(zip, 'png')
                    }
                })
            });
        });
        document.getElementById('downloadSvg').addEventListener('click', function () {
            const svgDivs = document.querySelectorAll('.svg-code');
            var zip = new JSZip();
            svgDivs.forEach(svgDiv => {
                const imgName = svgDiv.name + ".svg";
                zip.file(imgName, svgDiv.innerHTML);
            });
            downloadZip(zip, 'svg')
        });
    </script>
    <script>
        function genQrCode(urlText, battery_num, light, dark) {
            QRCode.toString(urlText, {
                type: "svg",
                scale: 4,
                width: 340,
                color: {
                    light: light,
                    dark: dark
                }
            }, function (err, svg) {
                const resultContainer = document.getElementById('result');
                const div = document.createElement('div');
                div.id = 'id' + battery_num
                div.name = battery_num
                div.className = 'svg-code'
                div.innerHTML = svg
                resultContainer.appendChild(div);
                addTextSvg(battery_num, light, dark)
            });
        }
        function addTextSvg(battery_num, light, dark){
            const svg = document.querySelector(`#id${battery_num} svg`);
            const path = document.querySelectorAll(`#id${battery_num} svg path`)[0]
            const height = Number(svg.getAttribute('height'));
            const scale = Number(svg.getAttribute('viewBox').split(" ")[3]);
            const rate = Number(height / scale);
            const words = lengthCutting(battery_num, 18)
            const addUnit = 1 + words.length
            const fontSize = 6
            const addScale = addUnit * fontSize + fontSize / 2
            svg.setAttribute('height', height+(rate*addScale));
            svg.setAttribute('viewBox', `0 0 ${scale} ${scale+addScale}`);
            path.setAttribute('d', `M0 0h${scale}v${scale+addScale}H0z`)
            const x = scale / 2
            var innerHTML = `<text fill="${dark}" stroke="none" font-family="Arial" font-size="${fontSize + 1}px" font-style="normal" font-weight="bold" text-decoration="normal" x="${x}" y="${scale+fontSize}" text-anchor="middle" dominant-baseline="alphabetic">浙品码</text>`
            words.forEach((word, index) => {
                const y = scale+ fontSize + 1+((index + 1)*fontSize)
                innerHTML += `<text fill="${dark}" stroke="none" font-family="Arial" font-size="${fontSize}px" font-style="normal" font-weight="bold" text-decoration="normal" x="${x}" y="${y}" text-anchor="middle" dominant-baseline="alphabetic">${word}</text>`
            })
            svg.innerHTML += innerHTML
        }
        function lengthCutting(str, num) {
            let reg = new RegExp(`(.{${num}})`),
            arr = str.split(reg);
            arr = arr.filter(item => item != "");
            return arr;
        }
        function addTextCanvas(battery_num, light, dark){
            const qrSize = 340;
            const maxWidth = qrSize

            function getLines(text, maxWidth) {
                var cttx = document.createElement('canvas').getContext('2d');
                cttx.font = 'bold 20px Arial';
                const words = text.split('');
                const lines = [];
                let currentLine = words[0];

                for (let i = 1; i < words.length; i++) {
                    const word = words[i];
                    const width = cttx.measureText(currentLine + word).width;
                    if (width < maxWidth) {
                        currentLine += word;
                    } else {
                        lines.push(currentLine);
                        currentLine = word;
                    }
                }
                lines.push(currentLine);
                return lines;
            }


            const lineHeight = 20;
            const padding = 8;
            const lines = getLines(battery_num, maxWidth - padding);
            const textHeight = (lines.length + 1) * lineHeight*1.2;

            var ctx = new C2S(qrSize,qrSize + textHeight + padding);
            ctx.fillStyle = light;
            ctx.fillRect(0, 0, qrSize, qrSize + textHeight + padding);
            // ctx.drawImage(img, 0, 0);

            ctx.fillStyle = dark;
            ctx.textAlign = 'center';
            ctx.font = 'bold 24px Arial';
            ctx.fillText('浙品码', qrSize / 2, qrSize + lineHeight);
            ctx.font = 'bold 20px Arial';
            for (let i = 0; i < lines.length; i++) {
                ctx.fillText(lines[i], qrSize / 2, qrSize + (i + 2) * lineHeight*1.2);
            }
            return ctx;
        }
        function getDateStr(now){
            var year = now.getFullYear();
            var month = now.getMonth() + 1; // 月份从0开始，因此需要加1
            var day = now.getDate();
            var hours = now.getHours();
            var minutes = now.getMinutes();
            var seconds = now.getSeconds();
            return year+''+month+''+ day+''+ hours+''+ minutes+''+ seconds;
        }
        function downloadZip(zip, suffix) {
            // 生成zip文件并下载
            zip.generateAsync({ 
                type: 'blob'
                }).then(function(content) {
                // 下载的文件名
                var filename = 'download_' + suffix + "_" + getDateStr(new Date()) + '.zip';
                // 创建隐藏的可下载链接
                var eleLink = document.createElement('a');
                eleLink.download = filename;
                eleLink.style.display = 'none';
                // 下载内容转变成blob地址
                eleLink.href = URL.createObjectURL(content);
                // 触发点击
                document.body.appendChild(eleLink);
                eleLink.click();
                // 然后移除
                document.body.removeChild(eleLink);
                });
        }
        function svg2Png(svg, callback){
            var img = document.createElement('img');
            var canvas = document.createElement('canvas');
            var ctx = canvas.getContext('2d');
            img.onload = function(){
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img,0,0);
                const imgBase64=dataURLToBlob(canvas.toDataURL('image/png'))
                callback(imgBase64)
            }
            img.src = 'data:image/svg+xml;base64,'+window.btoa(unescape(encodeURIComponent(svg)))
        }
        function dataURLToBlob(dataurl) {
            let arr = dataurl.split(','),
                mime = arr[0].match(/:(.*?);/)[1],
                bstr = atob(arr[1]),
                n = bstr.length,
                u8arr = new Uint8Array(n)
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n)
            }
            return new Blob([u8arr], { type: mime })
        }
    </script>
</body>
</html>
